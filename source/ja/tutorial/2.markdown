---
layout: page
title: "チュートリアル2: Amberの扱うデータ"
date: 2013-02-08 00:03:16 .
comments: true
sharing: true
footer: true
lang: ja
---

目次
-----

Amberの扱うデータには

* [単純データ](#primitive)
* 複合データ

の２種類があります。

## <a name="primitive"> 単純データ</a>

単純データとはAmberがあらかじめ用意しているデータの事で、主に以下の様な種類があります。この他にも単純データに分類されるデータが存在しますが、詳しくはリファレンスを参照して下さい。

* [文字列](#string)
* [シンボル](#symbol)
* [整数](#integer)
* [浮動小数点数](#floating_point)

### <a name="string"> 文字列 </a>

シングルクオート`'`またはダブルクオート`"`で文章を囲むと文字列データとして解釈されます。ダブルクオートで囲んだ場合にはエスケープシーケンスが解釈され、シングルクオートの場合には解釈されません。

    amber:1> puts("Hello\n")
    Hello
    
    => nil
    amber:2> puts('Hello\n')
    Hello\n
    => nil

標準ライブラリには文字列を操作する関数がいくつか用意されています。例えば以下のようにして文字列を連結する事が出来ます。

    amber:1> "Hello" + " " + "World" + "!"
    => "Hello World!"

詳しくは[標準ライブラリ:文字列](/ja/reference/std/string.html)を参照して下さい。

なお、Amberは**文字**を表すデータは持っておらず、単一の文字は**長さ1の文字列**として表現します。例えばi番目の文字を取り出す演算(演算子`[]`)を行なってみると

    amber:1> "Hello"[2]
    => "l"

という様に長さ1の文字列が返ってきます。

また、現状のAmberは多バイト文字をサポートしておらず、Ascii文字列のみが使用可能です。

### <a name="symbol"> シンボル </a>
アルファベット、アンダースコア`_`、数字を並べて書くと**シンボル**として解釈されます。ただし先頭を数字から始める事はできません。

Amberのシェルにシンボルをただ入力すると、それは**変数**であるとして解釈されます。例えば以下の様に単に`x`と入力すると、システムには`x`という名前の変数がまだ定義されていない為にエラーとなります。

    amber:1> x
    Error: UndefinedVariable{[amber:1], x}

変数の定義・使用については後の回で説明します。

さて、単なるデータとしてシンボルを作成する場合には以下の様に入力します。

    amber:1> \x
    => x
    amber:2> \This_Is_Symbol
    => This_Is_Symbol

これも後の回に詳しく説明しますがバックスラッシュ`\`は**クォーテーション**を表しています。通常、Amberは入力されたデータをプログラムとして解釈しますが、クォーテーションが行われている場合にはそのデータそのものとして解釈します。

シンボルを処理する関数もいくつか用意されています。詳しくは[標準ライブラリ:シンボル](/ja/reference/std/symbol.html)を参照して下さい。

### <a name="integer"> 整数 </a>

整数値を入力すればそのまま整数として解釈されます。`0b`、`0o`、`0x`などを先頭に付ければそれぞれ2進法・8進法・16進法による整数値として解釈されます。

    amber:1> 123
    => 123
    amber:2> 0b101
    => 5
    amber:3> 0o777
    => 511
    amber:4> 0xabcd
    => 43981

通常の四則演算などの計算が出来ます。

    amber:1> 1 + 2
    => 3
    amber:2> 1 - 2
    => -1
    amber:3> 2 * 3
    => 6
    amber:4> 7 / 3
    => 2
    amber:5> 7 % 3
    => 1
    amber:6> 2^3
    => 8

整数同士の除算(演算子`/`)は結果の切り捨てを行います。演算子`%`は剰余算、演算子`^`は累乗算を表します。詳しくは[標準ライブラリ:整数](/ja/reference/std/integer.html)を参照して下さい。

#### 固定長整数と多倍長整数

Amberの整数はデフォルトでは**固定長整数**であり、有限範囲の整数値しか表せません。固定長整数の範囲は`INTEGER_MIN`以上`INTEGER_MAX`以下です。現状では以下のような値になっていますが、実装により変化する可能性があります。

    amber:1> INTEGER_MIN
    => -1073741824
    amber:2> INTEGER_MAX
    => 1073741823

計算結果がこの範囲外となった場合には**オーバーフロー**し、誤った値となります。
デフォルトの動作ではオーバーフローの検出などは行いません。

Amberは**多倍長整数**も備えています。多倍長整数を使用する場合には`open`文を利用します。
(`open`文については後の回で詳しく扱います。)

    amber:1> open bigint
    => nil
    amber:2> 7^160
    => 1643184774938171857917000410556544806341837419599523497069764671233207565562287891877564323818254449486910838997871467298047369612896001

`open bigint`の実行後は固定長整数と多倍長整数の間の変換は自動的に行われます。(メモリに収まる範囲内で)任意の大きさの整数を用いた計算を行う事が可能になります。


### <a name="floating_point"> 浮動小数点数 </a>

小数点'.'を含む数値を入力すれば**浮動小数点数**となります。
浮動小数点数の内部表現は現状ではC言語の`double`型と同じです。
整数と同様に四則演算などを行う事が出来ます。

    amber:1> 1.2
    => 1.2
    amber:2> 3.14 ^ 2
    => 9.8596

詳しくは[標準ライブラリ:浮動小数点数](/ja/reference/std/floating_point.html)を参照して下さい。
